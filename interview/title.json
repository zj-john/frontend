{
    "title": [
        {
            "id": 1,
            "name": "call和apply的区别，哪个性能好一点",
            "answer": "call的性能好一点（参数>3时），apply->[], call-> str"
        },
        {
            "id": 2,
            "name": "(5).add(3).minus(2) => 6"
        },
        {
            "id": 3,
            "name": "箭头函数和普通函数的区别，箭头函数可否通过new生成实例",
            "answer": "1.箭头函数没有this 2.箭头函数没有argument参数 3.箭头函数没有构造函数（prototype属性）。所以不能通过new生成实例"
        },
        {
            "id": 4,
            "name": "AbcD => aBCd"
        },
        {
            "id": 5,
            "name": "字符串匹配算法,字符串S中是否存在字符串T（不用indexOf，includes）"
        },
        {
            "id": 6,
            "name": "网址匹配的正则"
        },
        {
            "id": 7,
            "name": "图片懒加载"
        },
        {
            "id": 8,
            "name": "正则：一个6-16位字符串，必须同时包含大小写字母和数字"
        },
        {
            "id": 9,
            "name": "实现attr(name, value)函数，列出所有属性为name，值为value的元素集合"
        },
        {
            "id": 10,
            "name": "英文字母/汉字组成的字符串，给英文单词前后加空格"
        },
        {
            "id": 11,
            "name": "[1,2,[3,4],5,6,1,[1,2,[9,0]]] 数组扁平化"
        },
        {
            "id": 12,
            "name": "实现new函数"
        },
        {
            "id": 13,
            "name": "数组合并"
        },
        {
            "id": 14,
            "name": "dom操作，插入大量节点，并绑定事件"
        },
        {
            "id": 15,
            "name": "生成dom tree，深度、广度遍历节点"
        },
        {
            "id": 16,
            "name": "排序算法"
        },
        {
            "id": 17,
            "name": "数组旋转"
        },
        {
            "id": 18,
            "name": "闭包应用，传值"
        },
        {
            "id": 19,
            "name": "if(a==1 && a ==2 && a==3) { console.log(\"ok\")}"
        },
        {
            "id": 20,
            "name": "科里化"
        },
        {
            "id": 21,
            "name": "css"
        },
        {
            "id": 22,
            "name": "deepcopy"
        },
        {
            "id": 23,
            "name": "字符串中最长不重复子串的长度： abcabcedfae  abcedf"
        },
        {
            "id": 24,
            "name": "promise.all"
        },
        {
            "id": 25,
            "name": "数组中最长升序长度：[10,4,3,4,203,6,8] => [3,4,6,8]"
        },
        {
            "id": 26,
            "name": "节流、防抖",
            "answer": [
                "debounce(防抖)，throttle(节流)，都是为了减少出发频率，节约资源，优化体验。",
                "1.防抖：限制时间内只执行最后一次。搜索框typeahead时，windows resize时。",
                "2.节流：间隔一段时间执行一次。btn的点击，滚动条事件。"
            ]
        }
        {
            "id": 27,
            "name": "https"
        },
        {
            "id": 28,
            "name": "数组合并：let arr1 = ['A1', 'A2', 'B1', 'B2'] ; let arr2 = ['A', 'B'] => ['A1', 'A2', 'A', 'B1', 'B2', 'B'] ;"
        },
        {
            "id": 29,
            "name": "let obj = {2:3,3:4,length:2, push:Array.prototype.push} obj.push(1) obj.push(2) console.log(obj);",
            "answer": "结果：{2: 1, 3: 2, length: 4, push: ƒ}。 push的实现方式 this[this.length] = value,所以会根据当前length选择赋值对象。push的返回值是新的length值"
        },
        {
            "id": 30,
            "name": "{1:22,2:33,5:88} => [22,33,null,null,88,null,null,null,null,null,null,null]"
        },
        {
            "id": 31,
            "name": "let nums1 = [1,2,2,1]; let nums = [2,3] => [2,2]"
        },
        {
            "id": 32,
            "name": "缓存",
            "answer": [
                {
                    "客户端缓存":[
                        "内存的缓存：打开浏览器新页面时",
                        "硬盘的缓存：新开浏览器时"
                    ]
                },
                {
                    "cache-control":{
                        "desc":"控制谁在什么条件下可以缓存响应以及可以缓存多久",
                        "value":{
                            "max-age": [
                                "从当前请求开始，允许获取的响应被重用的最长时间(单位为秒)",
                                "在max-age指定的时间之内，浏览器不会向服务器发送任何请求，包括验证缓存是否有效的请求"
                            ],
                            "public和private":[
                                "Cache-Control:public, max-age=60:可以在浏览器或者任何中继的Web代理中缓存（默认值）",
                                "Cache-Control:private, max-age=60:只有用户的浏览器可以缓存private响应，不允许任何中继Web代理对其进行缓存"
                            ],
                            "no-cache": "Cache-Control:no-cache，那么浏览器在使用缓存的资源之前，必须先与服务器确认返回的响应是否被更改，如果资源未被更改，可以避免下载",
                            "no-store": "Cache-Control:no-store，那么浏览器和任何中继的Web代理，都不会存储这次相应的数据。当下次请求该资源时，浏览器只能重新请求服务器，重新从服务器读取资源。等同于Cache-Control:max-age=0"
                    
                        }
                    }
                },
                "Last-Modified：秒级，上下游时间不一致 -> 需要ETag一起使用；与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304",
                "ETag:ETag可以是资源的hash值，也可以是一个内部维护的版本号。但不管怎样，ETag应该能反映出资源内容的变化，这是Http缓存可以正常工作的基础。",
                {
                    "请求过程":[
                        "是否存在资源副本: 否，直接请求源站",
                        "根据cache-control进行文档过期验证：否，直接使用缓存资源",
                        "向服务器请求资源，请求头发送if-modified-since（Last-Modified）或者if-none-match（ETag），进行服务端验证",
                        "资源未修改：返回304. 否则 Http200"
                    ]
                }
            ]
        },
        {
            "id":32,
            "name": "CSP(Content Secure Policy)",
            "answer": {
                "name":"网页安全政策，防止 XSS（Cross Site Scripting） 攻击",
                "methods":[
                    "通过 HTTP 头信息的Content-Security-Policy的字段",
                    "网页的<meta>标签"
                ],
                "old":"X-XSS-Protection: 1; mode=block.对尚不支持 CSP 的旧版浏览器的用户提供保护"
            }
        },
        {
            "id":33,
            "name": "Cross-site request forgery(CSRF 或者 XSRF)",
            "answer":[
                "跨站请求伪造",
                "简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的",
                {
                    "防御措施":[
                        "令牌同步模式(STP)当用户发送请求时，服务器端应用将令牌（英语：token，一个保密且唯一的值）嵌入HTML表格，并发送给客户端。客户端提交HTML表格时候，会将令牌发送到服务端，令牌的验证是由服务端实行的。令牌可以通过任何方式生成，只要确保随机性和唯一性",
                        "检查Referer字段",
                        "添加校验token"
                    ]
                }
            ]
        },
        {
            "id":34,
            "name": "NODE应用调试"
        },
        {
            "id":35,
            "name": "中断一个发送中的请求"
        }
    ]
}